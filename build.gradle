/**
 * Copyright (C) 2017 S. van der Baan

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.

 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'distribution'
apply plugin: 'codenarc'
apply plugin: 'jacoco'
apply plugin: 'net.saliman.cobertura'

buildscript {
    repositories {
        mavenCentral()
        // The next repo is only needed while using SNAPSHOT versions
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:4.0.0"
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        def tag = stdout.toString().trim()
        stdout.reset()
        exec {
            commandLine 'git', 'describe', '--all'
            standardOutput = stdout
        }
        if ('heads/master'.equalsIgnoreCase(stdout.toString().trim()) || stdout.toString().trim().contains(tag)) {
            return tag
        } else {
            // Adding the branch name to the version
            def ver = stdout.toString().trim()
            return tag + '-' + ver.substring(ver.indexOf('/') + 1)
        }
    }
    catch (ignored) {
        return null
    }
}

version = getVersionName()

repositories {
    jcenter()
}

// compileGroovy.groovyOptions.keepStubs = true
// compileGroovy.groovyOptions.listFiles = true
// compileGroovy.groovyOptions.verbose = true
// compileGroovy.groovyOptions.stubDir = file('build/generated/groovy')

dependencies {
    compile 'org.antlr:antlr4-runtime:4.7'

    compile 'org.codehaus.groovy:groovy-all:2.5.14' // was 2.4.12
// perhaps as improvement?
//    compileOnly 'org.controlsfx:controlsfx:8.40.13'
    compile 'org.apache.commons:commons-pool2:2.4.2'
    compile group: 'org.json', name: 'json', version: '20170516'

    // https://mvnrepository.com/artifact/com.h2database/h2
    compile group: 'com.h2database', name: 'h2', version: '1.4.196'

    // https://mvnrepository.com/artifact/org.ccil.cowan.tagsoup/tagsoup
//    compile group: 'org.ccil.cowan.tagsoup', name: 'tagsoup', version: '1.2.1'

    testCompile 'junit:junit:4.12'
    testCompile "de.saxsys:jfx-testrunner:1.2"
    testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
}

jar {
    baseName = 'IF'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    exclude('groovy/jmx/**')
    exclude('groovy/test/**')
    exclude('groovy/swing/**')
    exclude('groovy/mock/**')
    exclude('groovy/servlet/**')
    exclude('groovy/ui/**')
    exclude('groovyjarjarcommonscli/**')
    exclude('org/codehaus/groovy/ant/**')
    exclude('org/codehaus/groovy/testng/**')
    exclude('org/codehaus/groovy/tools/shell/**')
    exclude('org/codehaus/groovy/tools/groovydoc/**')
    manifest {
        attributes 'Main-Class': 'net.vdbaan.issuefinder.Runner',
                'version': project.version
    }
}
test {
    // Until generic (Metasploitable) test are uploaded
//    exclude '**/*Test*'

    jacoco {
        // Exclude the interface package for reporting code coverage
        excludes = ['**/*view*', '**/*presenter*', '**/*$*_closure*']

    }
}
test.finalizedBy(project.tasks.jacocoTestReport)


jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    // Exclude the interface package for reporting code coverage
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*view**', '**/*presenter*', '**/*$*_closure*', '**/*Tmp*'])
        }))
    }
}

check.dependsOn jacocoTestReport

codenarc {
    toolVersion = '2.0.0'
    configFile = file("${rootProject.projectDir}/config/codenarc/rules.groovy")
    reportFormat = 'html'
    ignoreFailures = true
}

cobertura {
    coverageFormats = ['html', 'xml']
}